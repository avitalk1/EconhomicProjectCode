import json
import boto3
from boto3.dynamodb.conditions import Key, Attr
from datetime import datetime
from decimal import Decimal

dynamodb_client = boto3.client('dynamodb', region_name="eu-west-1")
ddb = boto3.resource('dynamodb')

table = ddb.Table('RoomsStatus')

def lambda_handler(event, context):

    response = table.get_item(Key={'UserID' : event['uuid']})
    index=-1
    i=0
    d =response['Item']["boiler"]["lastDateSetOn"]
    t = response['Item']["boiler"]["lastTimeSetOn"]
    
    if response['Item']["boiler"]["isOn"]:
    #If the boiler is on, we will update the water temperature in the boiler logs
        for setOnLog in response['Item']["boiler"]["SetOnLogs"]:
            if setOnLog["SetOnDate"] == d+","+t:
                index=i
            i=i+1
            

           
        response2 = table.update_item(Key ={'UserID' :  event['uuid']},
        UpdateExpression="set boiler.currentWaterTemperature =:t, boiler.SetOnLogs[" +str(index)+"].waterTemperature =:t" ,
        ExpressionAttributeValues={':t': Decimal(str(event['waterTemperature']))},
        ReturnValues="UPDATED_NEW")
        
    else:
    #Update the current water temperature 
        response2 = table.update_item(Key ={'UserID' :  event['uuid']},
        UpdateExpression="set boiler.currentWaterTemperature =:t" ,
        ExpressionAttributeValues={':t': Decimal(str(event['waterTemperature']))},
        ReturnValues="UPDATED_NEW")
    

   
    
   
    return {
        'statusCode': 200,
        'body': json.dumps('Hello from Lambda!')
    }
